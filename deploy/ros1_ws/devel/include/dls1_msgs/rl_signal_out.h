// Generated by gencpp from file dls1_msgs/rl_signal_out.msg
// DO NOT EDIT!


#ifndef DLS1_MSGS_MESSAGE_RL_SIGNAL_OUT_H
#define DLS1_MSGS_MESSAGE_RL_SIGNAL_OUT_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <std_msgs/Header.h>

namespace dls1_msgs
{
template <class ContainerAllocator>
struct rl_signal_out_
{
  typedef rl_signal_out_<ContainerAllocator> Type;

  rl_signal_out_()
    : header()
    , desired_joint_positions()  {
      desired_joint_positions.assign(0.0);
  }
  rl_signal_out_(const ContainerAllocator& _alloc)
    : header(_alloc)
    , desired_joint_positions()  {
  (void)_alloc;
      desired_joint_positions.assign(0.0);
  }



   typedef  ::std_msgs::Header_<ContainerAllocator>  _header_type;
  _header_type header;

   typedef boost::array<double, 12>  _desired_joint_positions_type;
  _desired_joint_positions_type desired_joint_positions;





  typedef boost::shared_ptr< ::dls1_msgs::rl_signal_out_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::dls1_msgs::rl_signal_out_<ContainerAllocator> const> ConstPtr;

}; // struct rl_signal_out_

typedef ::dls1_msgs::rl_signal_out_<std::allocator<void> > rl_signal_out;

typedef boost::shared_ptr< ::dls1_msgs::rl_signal_out > rl_signal_outPtr;
typedef boost::shared_ptr< ::dls1_msgs::rl_signal_out const> rl_signal_outConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::dls1_msgs::rl_signal_out_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::dls1_msgs::rl_signal_out_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::dls1_msgs::rl_signal_out_<ContainerAllocator1> & lhs, const ::dls1_msgs::rl_signal_out_<ContainerAllocator2> & rhs)
{
  return lhs.header == rhs.header &&
    lhs.desired_joint_positions == rhs.desired_joint_positions;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::dls1_msgs::rl_signal_out_<ContainerAllocator1> & lhs, const ::dls1_msgs::rl_signal_out_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace dls1_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::dls1_msgs::rl_signal_out_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::dls1_msgs::rl_signal_out_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::dls1_msgs::rl_signal_out_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::dls1_msgs::rl_signal_out_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::dls1_msgs::rl_signal_out_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::dls1_msgs::rl_signal_out_<ContainerAllocator> const>
  : TrueType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::dls1_msgs::rl_signal_out_<ContainerAllocator> >
{
  static const char* value()
  {
    return "f8d521d926cc5906a32fd89020ac8289";
  }

  static const char* value(const ::dls1_msgs::rl_signal_out_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xf8d521d926cc5906ULL;
  static const uint64_t static_value2 = 0xa32fd89020ac8289ULL;
};

template<class ContainerAllocator>
struct DataType< ::dls1_msgs::rl_signal_out_<ContainerAllocator> >
{
  static const char* value()
  {
    return "dls1_msgs/rl_signal_out";
  }

  static const char* value(const ::dls1_msgs::rl_signal_out_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::dls1_msgs::rl_signal_out_<ContainerAllocator> >
{
  static const char* value()
  {
    return "Header header \n"
"\n"
"float64[12] desired_joint_positions\n"
"================================================================================\n"
"MSG: std_msgs/Header\n"
"# Standard metadata for higher-level stamped data types.\n"
"# This is generally used to communicate timestamped data \n"
"# in a particular coordinate frame.\n"
"# \n"
"# sequence ID: consecutively increasing ID \n"
"uint32 seq\n"
"#Two-integer timestamp that is expressed as:\n"
"# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')\n"
"# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')\n"
"# time-handling sugar is provided by the client library\n"
"time stamp\n"
"#Frame this data is associated with\n"
"string frame_id\n"
;
  }

  static const char* value(const ::dls1_msgs::rl_signal_out_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::dls1_msgs::rl_signal_out_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.header);
      stream.next(m.desired_joint_positions);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct rl_signal_out_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::dls1_msgs::rl_signal_out_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::dls1_msgs::rl_signal_out_<ContainerAllocator>& v)
  {
    s << indent << "header: ";
    s << std::endl;
    Printer< ::std_msgs::Header_<ContainerAllocator> >::stream(s, indent + "  ", v.header);
    s << indent << "desired_joint_positions[]" << std::endl;
    for (size_t i = 0; i < v.desired_joint_positions.size(); ++i)
    {
      s << indent << "  desired_joint_positions[" << i << "]: ";
      Printer<double>::stream(s, indent + "  ", v.desired_joint_positions[i]);
    }
  }
};

} // namespace message_operations
} // namespace ros

#endif // DLS1_MSGS_MESSAGE_RL_SIGNAL_OUT_H
